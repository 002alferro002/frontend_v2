import React, { useState, useEffect } from 'react';
import { X, ExternalLink, Download, Clock, Globe, Info } from 'lucide-react';
import TradingViewChart from './TradingViewChart';
import CoinGeckoChart from './CoinGeckoChart';
import ChartModal from './ChartModal';

interface SmartMoneyAlert {
  id: number;
  symbol: string;
  type: 'fair_value_gap' | 'order_block' | 'breaker_block';
  direction: 'bullish' | 'bearish';
  strength: number;
  price: number;
  timestamp: string;
  top?: number;
  bottom?: number;
  related_alert_id?: number;
}

interface SmartMoneyChartModalProps {
  alert: SmartMoneyAlert;
  onClose: () => void;
}

type ChartType = 'tradingview' | 'coingecko' | 'internal' | null;

const SmartMoneyChartModal: React.FC<SmartMoneyChartModalProps> = ({ alert, onClose }) => {
  const [selectedChart, setSelectedChart] = useState<ChartType>(null);
  const [relatedAlerts, setRelatedAlerts] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadRelatedAlerts();
  }, [alert.symbol]);

  const loadRelatedAlerts = async () => {
    try {
      setLoading(true);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∞–ª–µ—Ä—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
      const response = await fetch(`/api/alerts/symbol/${alert.symbol}?hours=24`);
      if (response.ok) {
        const data = await response.json();
        setRelatedAlerts(data.alerts || []);
      } else {
        // Fallback - –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∞–ª–µ—Ä—Ç—ã –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
        const allResponse = await fetch('/api/alerts/all');
        if (allResponse.ok) {
          const allData = await allResponse.json();

          // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ç–∏–ø—ã –∞–ª–µ—Ä—Ç–æ–≤
          const allAlerts = [
            ...(allData.volume_alerts || []),
            ...(allData.consecutive_alerts || []),
            ...(allData.priority_alerts || [])
          ];

          // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å–∏–º–≤–æ–ª—É –∏ –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)
          const oneDayAgo = Date.now() - (24 * 60 * 60 * 1000);
          const symbolAlerts = allAlerts.filter((a: any) => {
            if (a.symbol !== alert.symbol) return false;

            const alertTime = typeof a.timestamp === 'number' ? a.timestamp : new Date(a.timestamp).getTime();
            return alertTime > oneDayAgo;
          });

          setRelatedAlerts(symbolAlerts);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤:', error);
    } finally {
      setLoading(false);
    }
  };

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Smart Money –∞–ª–µ—Ä—Ç –≤ —Ñ–æ—Ä–º–∞—Ç –æ–±—ã—á–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞ –¥–ª—è TradingView
  const convertedAlert = {
    id: alert.id,
    symbol: alert.symbol,
    alert_type: 'smart_money',
    price: alert.price,
    timestamp: alert.timestamp,
    close_timestamp: alert.timestamp,
    has_imbalance: true,
    imbalance_data: {
      type: alert.type,
      direction: alert.direction,
      strength: alert.strength,
      top: alert.top,
      bottom: alert.bottom
    }
  };

  if (selectedChart === 'tradingview') {
    return (
      <TradingViewChart
        symbol={alert.symbol}
        alertPrice={alert.price}
        alertTime={alert.timestamp}
        alerts={[convertedAlert, ...relatedAlerts]}
        onClose={onClose}
      />
    );
  }

  if (selectedChart === 'coingecko') {
    return (
      <CoinGeckoChart
        symbol={alert.symbol}
        onClose={onClose}
      />
    );
  }

  if (selectedChart === 'internal') {
    return (
      <ChartModal
        alert={convertedAlert}
        onClose={onClose}
      />
    );
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg w-full max-w-2xl">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <div>
            <h2 className="text-2xl font-bold text-gray-900">Smart Money: {alert.symbol}</h2>
            <p className="text-gray-600">
              {alert.type.replace('_', ' ').toUpperCase()} ‚Ä¢ {alert.direction === 'bullish' ? '–ë—ã—á–∏–π' : '–ú–µ–¥–≤–µ–∂–∏–π'} ‚Ä¢ ${alert.price.toFixed(6)}
            </p>
            <p className="text-sm text-purple-600 mt-1">
              –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {alert.strength.toFixed(2)}% ‚Ä¢ {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : `${relatedAlerts.length} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤`}
            </p>
          </div>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600 p-2"
          >
            <X className="w-6 h-6" />
          </button>
        </div>

        {/* Chart Options */}
        <div className="p-6 space-y-4">
          {/* TradingView */}
          <button
            onClick={() => setSelectedChart('tradingview')}
            className="w-full p-6 border-2 border-gray-200 rounded-lg hover:border-blue-500 hover:bg-blue-50 transition-all group"
          >
            <div className="flex items-center space-x-4">
              <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center group-hover:bg-blue-200">
                <Globe className="w-6 h-6 text-blue-600" />
              </div>
              <div className="flex-1 text-left">
                <h3 className="text-lg font-semibold text-gray-900">TradingView —Å Smart Money –∑–æ–Ω–∞–º–∏</h3>
                <p className="text-gray-600">
                  –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏ Smart Money –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
                </p>
                <div className="flex items-center space-x-4 mt-2 text-sm text-gray-500">
                  <span>‚úì –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è</span>
                  <span>‚úì Smart Money –∑–æ–Ω—ã</span>
                  <span>‚úì –í—Å–µ —Å–∏–≥–Ω–∞–ª—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã</span>
                </div>
              </div>
              <div className="text-green-600 font-semibold">–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è</div>
            </div>
          </button>

          {/* CoinGecko */}
          <button
            onClick={() => setSelectedChart('coingecko')}
            className="w-full p-6 border-2 border-gray-200 rounded-lg hover:border-green-500 hover:bg-green-50 transition-all group"
          >
            <div className="flex items-center space-x-4">
              <div className="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center group-hover:bg-green-200">
                <ExternalLink className="w-6 h-6 text-green-600" />
              </div>
              <div className="flex-1 text-left">
                <h3 className="text-lg font-semibold text-gray-900">CoinGecko</h3>
                <p className="text-gray-600">
                  –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
                </p>
                <div className="flex items-center space-x-4 mt-2 text-sm text-gray-500">
                  <span>‚úì –†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è</span>
                  <span>‚úì –û–±—ä–µ–º—ã —Ç–æ—Ä–≥–æ–≤</span>
                  <span>‚úì –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ</span>
                </div>
              </div>
            </div>
          </button>

          {/* Internal Chart */}
          <button
            onClick={() => setSelectedChart('internal')}
            className="w-full p-6 border-2 border-gray-200 rounded-lg hover:border-purple-500 hover:bg-purple-50 transition-all group"
          >
            <div className="flex items-center space-x-4">
              <div className="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center group-hover:bg-purple-200">
                <Info className="w-6 h-6 text-purple-600" />
              </div>
              <div className="flex-1 text-left">
                <h3 className="text-lg font-semibold text-gray-900">–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≥—Ä–∞—Ñ–∏–∫</h3>
                <p className="text-gray-600">
                  –ì—Ä–∞—Ñ–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å Smart Money –∞–Ω–∞–ª–∏–∑–æ–º
                </p>
                <div className="flex items-center space-x-4 mt-2 text-sm text-gray-500">
                  <span>‚úì –î–∞–Ω–Ω—ã–µ –∞–ª–µ—Ä—Ç–æ–≤</span>
                  <span>‚úì Smart Money –∑–æ–Ω—ã</span>
                  <span>‚úì –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑</span>
                </div>
              </div>
            </div>
          </button>
        </div>

        {/* Footer */}
        <div className="p-6 border-t border-gray-200 bg-gray-50">
          <div className="text-sm text-gray-600">
            <p className="mb-2">
              <strong>üß† Smart Money Concepts:</strong> –ê–Ω–∞–ª–∏–∑ –∏–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
            </p>
            <div className="grid grid-cols-3 gap-4 text-xs">
              <div>
                <span className="text-blue-600">Fair Value Gap</span> - —Ä–∞–∑—Ä—ã–≤—ã –≤ —Ü–µ–Ω–∞—Ö
              </div>
              <div>
                <span className="text-green-600">Order Block</span> - –∑–æ–Ω—ã –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
              </div>
              <div>
                <span className="text-red-600">Breaker Block</span> - –ø—Ä–æ–±–∏—Ç—ã–µ —É—Ä–æ–≤–Ω–∏
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SmartMoneyChartModal;