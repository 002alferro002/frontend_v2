import asyncio
import logging
import aiohttp
from datetime import datetime, timedelta
from typing import Optional

logger = logging.getLogger(__name__)


class ExchangeTimeSync:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å –±–∏—Ä–∂–µ–π Bybit"""

    def __init__(self):
        self.time_offset = 0  # –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –ª–æ–∫–∞–ª—å–Ω—ã–º –∏ –±–∏—Ä–∂–µ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        self.last_sync = None
        self.sync_interval = 300  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        self.is_running = False
        self.is_synced = False
        self.sync_task = None

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏"""
        self.is_running = True
        logger.info("üïê –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å –±–∏—Ä–∂–µ–π Bybit")

        # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        await self.sync_time()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        self.sync_task = asyncio.create_task(self._periodic_sync())

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        self.is_running = False
        if self.sync_task:
            self.sync_task.cancel()
            try:
                await self.sync_task
            except asyncio.CancelledError:
                pass
        logger.info("üïê –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    async def _periodic_sync(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏"""
        while self.is_running:
            try:
                await asyncio.sleep(self.sync_interval)
                if self.is_running:
                    await self.sync_time()
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
                await asyncio.sleep(60)  # –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def sync_time(self) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å –±–∏—Ä–∂–µ–π"""
        try:
            url = "https://api.bybit.com/v5/market/time"

            # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –¥–æ –∑–∞–ø—Ä–æ—Å–∞ (–≤ UTC)
            local_time_before = datetime.now(timezone.utc)().timestamp() * 1000

            timeout = aiohttp.ClientTimeout(total=5)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.get(url) as response:
                    if response.status == 200:
                        data = await response.json()

                        # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ (–≤ UTC)
                        local_time_after = datetime.now(timezone.utc)().timestamp() * 1000

                        if data.get('retCode') == 0:
                            # –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –±–∏—Ä–∂–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                            exchange_time_seconds = int(data['result']['timeSecond'])
                            exchange_time_nanos = int(data['result']['timeNano'])

                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                            exchange_time = exchange_time_seconds * 1000 + (exchange_time_nanos // 1_000_000) % 100

                            # –£—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ç–∏ (–ø–æ–ª–æ–≤–∏–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—Ä–æ—Å–∞)
                            network_delay = (local_time_after - local_time_before) / 2
                            adjusted_local_time = local_time_before + network_delay

                            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ
                            self.time_offset = exchange_time - adjusted_local_time
                            self.last_sync = datetime.now(timezone.utc)()
                            self.is_synced = True

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
                            current_unix_ms = int(datetime.now(timezone.utc)().timestamp() * 1000)
                            expected_range_min = 1700000000000  # 2023 –≥–æ–¥
                            expected_range_max = 2000000000000  # 2033 –≥–æ–¥

                            if expected_range_min <= exchange_time <= expected_range_max:
                                logger.info(
                                    f"‚úÖ –í—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å –±–∏—Ä–∂–µ–π Bybit. –°–º–µ—â–µ–Ω–∏–µ: {self.time_offset:.0f}–º—Å, –∑–∞–¥–µ—Ä–∂–∫–∞ —Å–µ—Ç–∏: {network_delay:.0f}–º—Å")
                                logger.info(f"üïê –ë–∏—Ä–∂–µ–≤–æ–µ –≤—Ä–µ–º—è: {exchange_time}, –ª–æ–∫–∞–ª—å–Ω–æ–µ: {current_unix_ms:.0f}")
                                return True
                            else:
                                logger.error(
                                    f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –±–∏—Ä–∂–∏: {exchange_time} (–æ–∂–∏–¥–∞–µ—Ç—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {expected_range_min}-{expected_range_max})")
                                self.is_synced = False
                                return False
                        else:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ API –±–∏—Ä–∂–∏ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {data.get('retMsg')}")
                    else:
                        logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {response.status}")

        except asyncio.TimeoutError:
            logger.error("‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å –±–∏—Ä–∂–µ–π")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å –±–∏—Ä–∂–µ–π: {e}")

        self.is_synced = False
        return False

    def get_exchange_time(self) -> datetime:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –±–∏—Ä–∂–∏ –≤ UTC"""
        local_time_ms = datetime.now(timezone.utc)().timestamp() * 1000
        exchange_time_ms = local_time_ms + self.time_offset
        return datetime.utcfromtimestamp(exchange_time_ms / 1000)

    def get_exchange_timestamp(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π timestamp –±–∏—Ä–∂–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö"""
        local_time_ms = datetime.now(timezone.utc)().timestamp() * 1000
        return int(local_time_ms + self.time_offset)

    def get_sync_status(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        current_time = datetime.now(timezone.utc)()
        exchange_time = self.get_exchange_time()

        return {
            'is_synced': self.is_synced,
            'last_sync': self.last_sync.isoformat() if self.last_sync else None,
            'time_offset_ms': self.time_offset,
            'exchange_time': exchange_time.isoformat(),
            'local_time': current_time.isoformat(),
            'sync_age_seconds': (current_time - self.last_sync).total_seconds() if self.last_sync else None,
            'serverTime': self.get_exchange_timestamp(),  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º
            'status': 'active' if self.is_synced else 'not_synced'
        }

    def is_candle_closed(self, kline_data: dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –±–∏—Ä–∂–µ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        exchange_time = self.get_exchange_timestamp()
        candle_end_time = int(kline_data['end'])

        # –°–≤–µ—á–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞–∫—Ä—ã—Ç–æ–π, –µ—Å–ª–∏ –±–∏—Ä–∂–µ–≤–æ–µ –≤—Ä–µ–º—è >= –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–≤–µ—á–∏
        return exchange_time >= candle_end_time

    def get_candle_close_time(self, kline_start_time: int) -> datetime:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏ –≤ UTC"""
        return datetime.utcfromtimestamp((kline_start_time + 60000) / 1000)