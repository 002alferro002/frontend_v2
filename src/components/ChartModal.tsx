import React, { useState, useEffect, useRef } from 'react';
import { X, ExternalLink, Download, BookOpen, Info, Calculator, DollarSign, Clock, AlertTriangle, Target } from 'lucide-react';
import OrderBookModal from './OrderBookModal';
import TimeZoneToggle from './TimeZoneToggle';
import PaperTradingModal from './PaperTradingModal';
import RealTradingModal from './RealTradingModal';
import { useTimeZone } from '../contexts/TimeZoneContext';
import { formatTime } from '../utils/timeUtils';

interface Alert {
  id: number;
  symbol: string;
  alert_type: string;
  price: number;
  timestamp: number | string;
  close_timestamp?: number | string;
  preliminary_alert?: Alert;
  has_imbalance?: boolean;
  imbalance_data?: {
    type: 'fair_value_gap' | 'order_block' | 'breaker_block';
    strength: number;
    direction: 'bullish' | 'bearish';
    top: number;
    bottom: number;
    timestamp: number;
  };
  candle_data?: {
    open: number;
    high: number;
    low: number;
    close: number;
    volume: number;
    alert_level?: number;
  };
  order_book_snapshot?: {
    bids: Array<[number, number]>;
    asks: Array<[number, number]>;
    timestamp: number | string;
  };
}

interface ChartData {
  timestamp: number;
  open: number;
  high: number;
  low: number;
  close: number;
  volume: number;
  volume_usdt: number;
  is_long: boolean;
}

interface ChartModalProps {
  alert: Alert;
  onClose: () => void;
}

declare global {
  interface Window {
    LightweightCharts: any;
  }
}

// –ö—ç—à –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
let chartScriptLoaded = false;
let chartScriptPromise: Promise<void> | null = null;

const ChartModal: React.FC<ChartModalProps> = ({ alert, onClose }) => {
  const [chartData, setChartData] = useState<ChartData[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [showOrderBook, setShowOrderBook] = useState(false);
  const [showTimestampInfo, setShowTimestampInfo] = useState(false);
  const [showPaperTrading, setShowPaperTrading] = useState(false);
  const [showRealTrading, setShowRealTrading] = useState(false);
  const [chartReady, setChartReady] = useState(false);
  const [dataSource, setDataSource] = useState<'database' | 'mock'>('database');
  const [alertVisible, setAlertVisible] = useState(true);

  const chartContainerRef = useRef<HTMLDivElement>(null);
  const chartRef = useRef<any>(null);
  const candlestickSeriesRef = useRef<any>(null);
  const volumeSeriesRef = useRef<any>(null);

  const { timeZone } = useTimeZone();

  useEffect(() => {
    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ –∏ –¥–∞–Ω–Ω—ã—Ö
    Promise.all([
      loadLightweightChartsScript(),
      loadChartDataFromDatabase()
    ]).catch(console.error);

    return () => {
      if (chartRef.current) {
        chartRef.current.remove();
      }
    };
  }, []);

  useEffect(() => {
    if (chartReady && chartData.length > 0) {
      createChart();
    }
  }, [chartReady, chartData]);

  const loadChartDataFromDatabase = async () => {
    try {
      setLoading(true);
      setError(null);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const response = await fetch(`/api/chart-data/${alert.symbol}/database`, {
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        const data = await response.json();
        const candleData = data.chart_data || data.data || data || [];

        if (candleData.length > 0) {
          setChartData(candleData);
          setDataSource('database');

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∏–¥–µ–Ω –ª–∏ —Å–∏–≥–Ω–∞–ª –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
          const alertTimestamp = typeof alert.timestamp === 'number'
            ? alert.timestamp
            : new Date(alert.timestamp).getTime();

          const alertCloseTimestamp = alert.close_timestamp
            ? (typeof alert.close_timestamp === 'number'
                ? alert.close_timestamp
                : new Date(alert.close_timestamp).getTime())
            : alertTimestamp;

          // –ù–∞—Ö–æ–¥–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–∞–Ω–Ω—ã—Ö
          const dataStartTime = Math.min(...candleData.map(d => d.timestamp));
          const dataEndTime = Math.max(...candleData.map(d => d.timestamp));

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ —Å–∏–≥–Ω–∞–ª –≤ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞–Ω–Ω—ã—Ö
          const signalInRange = alertCloseTimestamp >= dataStartTime && alertCloseTimestamp <= dataEndTime;
          setAlertVisible(signalInRange);

          console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${candleData.length} —Å–≤–µ—á–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${alert.symbol}`);
          console.log(`üéØ –°–∏–≥–Ω–∞–ª ${signalInRange ? '–≤–∏–¥–µ–Ω' : '–Ω–µ –≤–∏–¥–µ–Ω'} –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ`);
          console.log(`üìÖ –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞–Ω–Ω—ã—Ö: ${new Date(dataStartTime).toISOString()} - ${new Date(dataEndTime).toISOString()}`);
          console.log(`üö® –í—Ä–µ–º—è —Å–∏–≥–Ω–∞–ª–∞: ${new Date(alertCloseTimestamp).toISOString()}`);
        } else {
          // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º mock –¥–∞–Ω–Ω—ã–µ
          console.warn('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ');
          const mockData = generateMockData();
          setChartData(mockData);
          setDataSource('mock');
          setAlertVisible(true);
        }
      } else {
        throw new Error(`API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${response.status}`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã:', error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ
      const mockData = generateMockData();
      setChartData(mockData);
      setDataSource('mock');
      setAlertVisible(true);
    } finally {
      setLoading(false);
    }
  };

  const generateMockData = () => {
    const alertTimestamp = typeof alert.timestamp === 'number'
      ? alert.timestamp
      : new Date(alert.timestamp).getTime();

    const alertCloseTimestamp = alert.close_timestamp
      ? (typeof alert.close_timestamp === 'number'
          ? alert.close_timestamp
          : new Date(alert.close_timestamp).getTime())
      : alertTimestamp;

    const data = [];
    let price = alert.price || 50000;

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 120 —Å–≤–µ—á–µ–π: 60 –¥–æ —Å–∏–≥–Ω–∞–ª–∞ –∏ 60 –ø–æ—Å–ª–µ
    const signalCandleIndex = 60;
    const startTime = alertCloseTimestamp - (signalCandleIndex * 60 * 1000);

    for (let i = 0; i < 120; i++) {
      const timestamp = startTime + (i * 60 * 1000);

      // –ï—Å–ª–∏ —ç—Ç–æ —Å–≤–µ—á–∞ —Å–∏–≥–Ω–∞–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—É—é —Ü–µ–Ω—É
      if (i === signalCandleIndex) {
        const open = price;
        const close = alert.price;
        const high = Math.max(open, close) + Math.abs(close - open) * 0.1;
        const low = Math.min(open, close) - Math.abs(close - open) * 0.1;
        const volume = Math.random() * 2000000; // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –æ–±—ä–µ–º –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞

        data.push({
          timestamp,
          open,
          high,
          low,
          close,
          volume,
          volume_usdt: volume * close,
          is_long: close > open
        });

        price = close;
      } else {
        // –û–±—ã—á–Ω—ã–µ —Å–≤–µ—á–∏ —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
        const change = (Math.random() - 0.5) * price * 0.015; // –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–æ 1.5%
        const open = price;
        const close = price + change;
        const high = Math.max(open, close) + Math.random() * price * 0.005;
        const low = Math.min(open, close) - Math.random() * price * 0.005;
        const volume = Math.random() * 1000000;

        data.push({
          timestamp,
          open,
          high,
          low,
          close,
          volume,
          volume_usdt: volume * close,
          is_long: close > open
        });

        price = close;
      }
    }

    return data;
  };

  const loadLightweightChartsScript = async (): Promise<void> => {
    if (window.LightweightCharts) {
      setChartReady(true);
      return Promise.resolve();
    }

    if (chartScriptLoaded) {
      setChartReady(true);
      return Promise.resolve();
    }

    if (chartScriptPromise) {
      return chartScriptPromise;
    }

    chartScriptPromise = new Promise((resolve, reject) => {
      const script = document.createElement('script');
      script.src = 'https://unpkg.com/lightweight-charts/dist/lightweight-charts.standalone.production.js';
      script.async = true;

      script.onload = () => {
        console.log('Lightweight Charts loaded successfully');
        chartScriptLoaded = true;
        setChartReady(true);
        setError(null);
        resolve();
      };

      script.onerror = () => {
        console.error('Failed to load Lightweight Charts');
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤');
        setChartReady(false);
        chartScriptPromise = null;
        reject(new Error('Script loading failed'));
      };

      document.head.appendChild(script);
    });

    return chartScriptPromise;
  };

  const createChart = () => {
    if (!chartContainerRef.current || !window.LightweightCharts || chartData.length === 0) {
      return;
    }

    if (chartRef.current) {
      chartRef.current.remove();
    }

    try {
      const chart = window.LightweightCharts.createChart(chartContainerRef.current, {
        width: chartContainerRef.current.clientWidth,
        height: 500,
        layout: {
          background: { color: '#ffffff' },
          textColor: '#333',
        },
        grid: {
          vertLines: { color: '#f0f0f0' },
          horzLines: { color: '#f0f0f0' },
        },
        crosshair: {
          mode: window.LightweightCharts.CrosshairMode.Normal,
        },
        rightPriceScale: {
          borderColor: '#cccccc',
        },
        timeScale: {
          borderColor: '#cccccc',
          timeVisible: true,
          secondsVisible: false,
        },
      });

      chartRef.current = chart;

      const candlestickSeries = chart.addCandlestickSeries({
        upColor: '#26a69a',
        downColor: '#ef5350',
        borderVisible: false,
        wickUpColor: '#26a69a',
        wickDownColor: '#ef5350',
      });

      candlestickSeriesRef.current = candlestickSeries;

      const volumeSeries = chart.addHistogramSeries({
        color: '#26a69a',
        priceFormat: {
          type: 'volume',
        },
        priceScaleId: 'volume',
      });

      volumeSeriesRef.current = volumeSeries;

      chart.priceScale('volume').applyOptions({
        scaleMargins: {
          top: 0.7,
          bottom: 0,
        },
      });

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
      const candleData = chartData.map(item => ({
        time: Math.floor(item.timestamp / 1000),
        open: item.open,
        high: item.high,
        low: item.low,
        close: item.close,
      }));

      const volumeData = chartData.map(item => ({
        time: Math.floor(item.timestamp / 1000),
        value: item.volume_usdt,
        color: item.is_long ? '#26a69a' : '#ef5350',
      }));

      candlestickSeries.setData(candleData);
      volumeSeries.setData(volumeData);

      // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –∞–ª–µ—Ä—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∏–≥–Ω–∞–ª –≤–∏–¥–µ–Ω
      if (alertVisible) {
        addAlertMarkers(candlestickSeries);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–æ–Ω—ã –∏–º–±–∞–ª–∞–Ω—Å–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
      if (alert.has_imbalance && alert.imbalance_data) {
        addImbalanceZones(chart);
      }

      // –ü–æ–¥–≥–æ–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø–æ–¥ –¥–∞–Ω–Ω—ã–µ
      chart.timeScale().fitContent();

      // –ï—Å–ª–∏ —Å–∏–≥–Ω–∞–ª –≤–∏–¥–µ–Ω, —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –Ω–∞ –Ω–µ–º
      if (alertVisible) {
        const alertTimestamp = alert.close_timestamp || alert.timestamp;
        const alertTime = Math.floor((typeof alertTimestamp === 'number' ? alertTimestamp : new Date(alertTimestamp).getTime()) / 1000);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤–æ–∫—Ä—É–≥ —Å–∏–≥–Ω–∞–ª–∞
        const visibleRange = {
          from: alertTime - 1800, // 30 –º–∏–Ω—É—Ç –¥–æ
          to: alertTime + 1800     // 30 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ
        };

        chart.timeScale().setVisibleRange(visibleRange);
      }

      // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ResizeObserver
      let resizeTimeout: NodeJS.Timeout;
      const resizeObserver = new ResizeObserver(entries => {
        if (entries.length === 0 || entries[0].target !== chartContainerRef.current) {
          return;
        }

        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(() => {
          const newRect = entries[0].contentRect;
          chart.applyOptions({ width: newRect.width, height: newRect.height });
        }, 100);
      });

      if (chartContainerRef.current) {
        resizeObserver.observe(chartContainerRef.current);
      }

      console.log('Chart created successfully');
    } catch (err) {
      console.error('Error creating chart:', err);
      setError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞');
    }
  };

  const addAlertMarkers = (series: any) => {
    const alertTime = alert.close_timestamp || alert.timestamp;
    const alertTimestamp = Math.floor((typeof alertTime === 'number' ? alertTime : new Date(alertTime).getTime()) / 1000);

    const markers = [{
      time: alertTimestamp,
      position: 'aboveBar',
      color: '#f68410',
      shape: 'circle',
      text: `üéØ ${alert.alert_type}: $${alert.price.toFixed(6)}`,
    }];

    // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (alert.preliminary_alert) {
      const prelimTime = Math.floor((typeof alert.preliminary_alert.timestamp === 'number' ? alert.preliminary_alert.timestamp : new Date(alert.preliminary_alert.timestamp).getTime()) / 1000);
      markers.push({
        time: prelimTime,
        position: 'belowBar',
        color: '#ff9800',
        shape: 'square',
        text: `‚ö†Ô∏è –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π: $${alert.preliminary_alert.price.toFixed(6)}`,
      });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä —É—Ä–æ–≤–Ω—è –∞–ª–µ—Ä—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (alert.candle_data?.alert_level) {
      markers.push({
        time: alertTimestamp,
        position: 'belowBar',
        color: '#9c27b0',
        shape: 'square',
        text: `üìä –£—Ä–æ–≤–µ–Ω—å: $${alert.candle_data.alert_level.toFixed(6)}`,
      });
    }

    series.setMarkers(markers);
  };

  const addImbalanceZones = (chart: any) => {
    if (!alert.imbalance_data) return;

    const alertTime = alert.close_timestamp || alert.timestamp;
    const alertTimestamp = Math.floor((typeof alertTime === 'number' ? alertTime : new Date(alertTime).getTime()) / 1000);

    const imbalanceTopSeries = chart.addLineSeries({
      color: alert.imbalance_data.direction === 'bullish' ? '#26a69a' : '#ef5350',
      lineWidth: 2,
      lineStyle: window.LightweightCharts.LineStyle.Dashed,
      title: `${alert.imbalance_data.type.toUpperCase()} Top`,
    });

    const imbalanceBottomSeries = chart.addLineSeries({
      color: alert.imbalance_data.direction === 'bullish' ? '#26a69a' : '#ef5350',
      lineWidth: 2,
      lineStyle: window.LightweightCharts.LineStyle.Dashed,
      title: `${alert.imbalance_data.type.toUpperCase()} Bottom`,
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–æ–Ω—É –∏–º–±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –≤—Å–µ–º –≤–∏–¥–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    const dataStartTime = Math.min(...chartData.map(d => Math.floor(d.timestamp / 1000)));
    const dataEndTime = Math.max(...chartData.map(d => Math.floor(d.timestamp / 1000)));

    imbalanceTopSeries.setData([
      { time: dataStartTime, value: alert.imbalance_data.top },
      { time: dataEndTime, value: alert.imbalance_data.top },
    ]);

    imbalanceBottomSeries.setData([
      { time: dataStartTime, value: alert.imbalance_data.bottom },
      { time: dataEndTime, value: alert.imbalance_data.bottom },
    ]);
  };

  const openTradingView = () => {
    const cleanSymbol = alert.symbol.replace('USDT', '');
    const url = `https://www.tradingview.com/chart/?symbol=BYBIT:${cleanSymbol}USDT.P&interval=1`;
    window.open(url, '_blank');
  };

  const downloadChart = () => {
    const csvContent = [
      'Timestamp,Open,High,Low,Close,Volume,Volume_USDT,Is_Long',
      ...chartData.map(d =>
        `${new Date(d.timestamp).toISOString()},${d.open},${d.high},${d.low},${d.close},${d.volume},${d.volume_usdt},${d.is_long}`
      )
    ].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${alert.symbol}_chart_data.csv`;
    a.click();
    window.URL.revokeObjectURL(url);
  };

  return (
    <>
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
        <div className="bg-white rounded-lg w-full max-w-[95vw] h-[90vh] flex flex-col">
          {/* Header */}
          <div className="flex items-center justify-between p-6 border-b border-gray-200">
            <div>
              <h2 className="text-2xl font-bold text-gray-900">{alert.symbol}</h2>
              <div className="flex items-center space-x-4 mt-1">
                <p className="text-gray-600">
                  –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≥—Ä–∞—Ñ–∏–∫ ‚Ä¢ –ê–ª–µ—Ä—Ç: {formatTime(alert.close_timestamp || alert.timestamp, timeZone)}
                </p>
                <span className={`text-sm px-2 py-1 rounded ${
                  dataSource === 'database' ? 'text-green-600 bg-green-100' : 'text-yellow-600 bg-yellow-100'
                }`}>
                  {dataSource === 'database' ? '–î–∞–Ω–Ω—ã–µ –∏–∑ –ë–î' : 'Demo –¥–∞–Ω–Ω—ã–µ'}
                </span>
                {!alertVisible && (
                  <span className="text-sm text-orange-600 bg-orange-100 px-2 py-1 rounded flex items-center">
                    <AlertTriangle className="w-3 h-3 mr-1" />
                    –°–∏–≥–Ω–∞–ª –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                  </span>
                )}
                {alertVisible && (
                  <span className="text-sm text-blue-600 bg-blue-100 px-2 py-1 rounded flex items-center">
                    <Target className="w-3 h-3 mr-1" />
                    –°–∏–≥–Ω–∞–ª –≤–∏–¥–µ–Ω
                  </span>
                )}
              </div>
              {alert.has_imbalance && (
                <div className="flex items-center space-x-2 mt-2">
                  <span className="text-orange-500 text-sm">‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –∏–º–±–∞–ª–∞–Ω—Å</span>
                  {alert.imbalance_data && (
                    <span className="text-xs text-gray-500">
                      ({alert.imbalance_data.type}, {alert.imbalance_data.direction}, —Å–∏–ª–∞: {alert.imbalance_data.strength.toFixed(1)}%)
                    </span>
                  )}
                </div>
              )}
            </div>

            <div className="flex items-center space-x-3">
              <TimeZoneToggle />

              <button
                onClick={() => setShowTimestampInfo(!showTimestampInfo)}
                className="text-gray-500 hover:text-gray-700 p-2"
                title="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö"
              >
                <Info className="w-4 h-4" />
              </button>

              {/* –ö–Ω–æ–ø–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ */}
              <button
                onClick={() => setShowPaperTrading(true)}
                className="flex items-center space-x-2 bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg transition-colors"
              >
                <Calculator className="w-4 h-4" />
                <span>–ë—É–º–∞–∂–Ω–∞—è</span>
              </button>

              <button
                onClick={() => setShowRealTrading(true)}
                className="flex items-center space-x-2 bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg transition-colors"
              >
                <DollarSign className="w-4 h-4" />
                <span>–†–µ–∞–ª—å–Ω–∞—è</span>
              </button>

              {alert.order_book_snapshot && (
                <button
                  onClick={() => setShowOrderBook(true)}
                  className="flex items-center space-x-2 bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg transition-colors"
                >
                  <BookOpen className="w-4 h-4" />
                  <span>–°—Ç–∞–∫–∞–Ω</span>
                </button>
              )}

              <button
                onClick={downloadChart}
                className="flex items-center space-x-2 bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg transition-colors"
              >
                <Download className="w-4 h-4" />
                <span>–°–∫–∞—á–∞—Ç—å</span>
              </button>

              <button
                onClick={openTradingView}
                className="flex items-center space-x-2 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors"
              >
                <ExternalLink className="w-4 h-4" />
                <span>TradingView</span>
              </button>

              <button
                onClick={onClose}
                className="text-gray-400 hover:text-gray-600 p-2"
              >
                <X className="w-6 h-6" />
              </button>
            </div>
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö */}
          {showTimestampInfo && (
            <div className="p-4 bg-blue-50 border-b border-gray-200">
              <h4 className="font-medium text-blue-900 mb-2">üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞</h4>
              <div className="text-sm text-blue-700 space-y-2">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <p><strong>–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:</strong> {dataSource === 'database' ? '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã' : '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'}</p>
                    <p><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π:</strong> {chartData.length}</p>
                    <p><strong>–ò–Ω—Ç–µ—Ä–≤–∞–ª:</strong> 1 –º–∏–Ω—É—Ç–∞</p>
                  </div>
                  <div>
                    <p><strong>–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞–Ω–Ω—ã—Ö:</strong> {chartData.length > 0 ?
                      `${formatTime(Math.min(...chartData.map(d => d.timestamp)), timeZone, { includeDate: false })} - ${formatTime(Math.max(...chartData.map(d => d.timestamp)), timeZone, { includeDate: false })}` :
                      '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}</p>
                    <p><strong>–°–∏–≥–Ω–∞–ª:</strong> {alertVisible ? '‚úÖ –í–∏–¥–µ–Ω –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ' : '‚ùå –í–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö'}</p>
                  </div>
                </div>
                {!alertVisible && (
                  <div className="mt-3 p-3 bg-orange-100 rounded">
                    <p className="text-orange-800"><strong>‚ö†Ô∏è –°–∏–≥–Ω–∞–ª –Ω–µ –≤–∏–¥–µ–Ω:</strong> –í—Ä–µ–º—è —Å–∏–≥–Ω–∞–ª–∞ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ. –ì—Ä–∞—Ñ–∏–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞.</p>
                  </div>
                )}
              </div>
            </div>
          )}

          {/* Chart Content */}
          <div className="flex-1 p-6 overflow-hidden">
            {loading ? (
              <div className="flex items-center justify-center h-full">
                <div className="text-center">
                  <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
                  <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã...</p>
                  <p className="text-xs text-gray-500 mt-2">
                    –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç–Ω—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è {alert.symbol}
                  </p>
                </div>
              </div>
            ) : error ? (
              <div className="flex items-center justify-center h-full">
                <div className="text-center">
                  <p className="text-red-600 mb-4">–û—à–∏–±–∫–∞: {error}</p>
                  <button
                    onClick={loadChartDataFromDatabase}
                    className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors mr-2"
                  >
                    –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                  </button>
                  <button
                    onClick={openTradingView}
                    className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg transition-colors"
                  >
                    –û—Ç–∫—Ä—ã—Ç—å TradingView
                  </button>
                </div>
              </div>
            ) : !chartReady ? (
              <div className="flex items-center justify-center h-full">
                <div className="text-center">
                  <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-green-500 mx-auto mb-4"></div>
                  <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤...</p>
                </div>
              </div>
            ) : chartData.length === 0 ? (
              <div className="flex items-center justify-center h-full">
                <div className="text-center">
                  <AlertTriangle className="w-12 h-12 text-orange-500 mx-auto mb-4" />
                  <p className="text-gray-600">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
                  <p className="text-sm text-gray-500 mt-2">–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å–≤–µ—á–µ–π –¥–ª—è {alert.symbol}</p>
                </div>
              </div>
            ) : (
              <div className="h-full">
                <div
                  ref={chartContainerRef}
                  className="w-full h-full"
                  style={{ minHeight: '400px' }}
                />
              </div>
            )}
          </div>

          {/* Alert Info */}
          <div className="p-6 border-t border-gray-200 bg-gray-50">
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
              <div>
                <span className="text-gray-600">–¢–∏–ø –∞–ª–µ—Ä—Ç–∞:</span>
                <span className="ml-2 text-gray-900 font-medium">
                  {alert.alert_type === 'volume_spike' ? '–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –æ–±—ä–µ–º–∞' :
                   alert.alert_type === 'consecutive_long' ? 'LONG –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å' :
                   alert.alert_type === 'priority' ? '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π' : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}
                </span>
              </div>
              <div>
                <span className="text-gray-600">–¶–µ–Ω–∞ –∞–ª–µ—Ä—Ç–∞:</span>
                <span className="ml-2 text-gray-900 font-mono">${alert.price.toFixed(8)}</span>
              </div>
              <div>
                <span className="text-gray-600">–í—Ä–µ–º—è:</span>
                <span className="ml-2 text-gray-900 flex items-center">
                  <Clock className="w-3 h-3 mr-1" />
                  {formatTime(alert.close_timestamp || alert.timestamp, timeZone)}
                </span>
              </div>
              <div>
                <span className="text-gray-600">–°–≤–µ—á–µ–π –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ:</span>
                <span className="ml-2 text-gray-900">{chartData.length}</span>
              </div>
            </div>

            {alert.candle_data && (
              <div className="mt-4 p-4 bg-white rounded-lg border border-gray-200">
                <div className="text-sm font-medium text-gray-700 mb-2">–î–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏ –∞–ª–µ—Ä—Ç–∞ (OHLCV):</div>
                <div className="grid grid-cols-5 gap-4 text-sm">
                  <div>
                    <span className="text-gray-600">Open:</span>
                    <div className="text-gray-900 font-mono">${alert.candle_data.open.toFixed(8)}</div>
                  </div>
                  <div>
                    <span className="text-gray-600">High:</span>
                    <div className="text-gray-900 font-mono">${alert.candle_data.high.toFixed(8)}</div>
                  </div>
                  <div>
                    <span className="text-gray-600">Low:</span>
                    <div className="text-gray-900 font-mono">${alert.candle_data.low.toFixed(8)}</div>
                  </div>
                  <div>
                    <span className="text-gray-600">Close:</span>
                    <div className="text-gray-900 font-mono">${alert.candle_data.close.toFixed(8)}</div>
                  </div>
                  <div>
                    <span className="text-gray-600">Volume:</span>
                    <div className="text-gray-900 font-mono">{alert.candle_data.volume.toFixed(2)}</div>
                  </div>
                </div>
                {alert.candle_data.alert_level && (
                  <div className="mt-2 text-sm">
                    <span className="text-gray-600">–£—Ä–æ–≤–µ–Ω—å –∞–ª–µ—Ä—Ç–∞:</span>
                    <span className="ml-2 text-purple-600 font-mono">${alert.candle_data.alert_level.toFixed(8)}</span>
                  </div>
                )}
              </div>
            )}

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ –¥–∞–Ω–Ω—ã—Ö */}
            <div className="mt-4 text-xs text-gray-500 flex justify-between items-center">
              <span>
                –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: {dataSource === 'database' ? 'üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã' : 'üé≠ Demo –¥–∞–Ω–Ω—ã–µ'} ‚Ä¢
                Powered by Lightweight Charts ‚Ä¢
                {alertVisible ? 'üéØ –°–∏–≥–Ω–∞–ª –æ—Ç–æ–±—Ä–∞–∂–µ–Ω' : '‚ö†Ô∏è –°–∏–≥–Ω–∞–ª –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞'}
              </span>
              <span>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timeZone === 'UTC' ? 'UTC' : '–õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è'}</span>
            </div>
          </div>
        </div>

        {/* Order Book Modal */}
        {showOrderBook && alert.order_book_snapshot && (
          <OrderBookModal
            orderBook={alert.order_book_snapshot}
            alertPrice={alert.price}
            symbol={alert.symbol}
            onClose={() => setShowOrderBook(false)}
          />
        )}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ */}
      {showPaperTrading && (
        <PaperTradingModal
          symbol={alert.symbol}
          alertPrice={alert.price}
          alertId={alert.id}
          onClose={() => setShowPaperTrading(false)}
        />
      )}

      {showRealTrading && (
        <RealTradingModal
          symbol={alert.symbol}
          alertPrice={alert.price}
          alertId={alert.id}
          onClose={() => setShowRealTrading(false)}
        />
      )}
    </>
  );
};

export default ChartModal;